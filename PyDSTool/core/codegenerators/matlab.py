#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import

from PyDSTool.common import intersect, concatStrDict, idfn
from PyDSTool.parseUtils import addArgToCalls
from PyDSTool.Symbolic import QuantSpec

from .base import _processReused, CodeGenerator


MATLAB_FUNCTION_TEMPLATE = """\
function [vf_, y_] = {name}(vf_, t_, x_, p_)
% Vector field definition for model {specname}
% Generated by PyDSTool for ADMC++ target

{pardef}{vardef}
{start}{reuseterms}
{result}

{end}
"""


MATLAB_AUX_TEMPLATE = """\
function y_ = {name}({vnames},  p_)
% Auxilliary function {name} for model {specname}
% Generated by PyDSTool for ADMC++ target

{pardef} \


{reuseterms}
y_ = {result};

"""


class Matlab(CodeGenerator):

    def __init__(self, fspec, **kwargs):
        if 'define' not in kwargs:
            kwargs['define'] = "\t{0} = {1}_({2});\n"

        if 'power_sign' not in kwargs:
            kwargs['power_sign'] = "^"

        super(Matlab, self).__init__(fspec, **kwargs)

        self.context = {
            'specname': self.fspec.name,
            'pardef': "\n% Parameter definitions\n\n" + self.defineMany(self.fspec.pars, "p", 1),
            'vardef': "\n% Variable definitions\n\n" + self.defineMany(self.fspec.vars, "x", 1),
            'start': self._format_user_code(self.opts['start']) if self.opts['start'] else '',
            'end': self._format_user_code(self.opts['end']) if self.opts['end'] else '',
        }

        self.reuse = "% reused term definitions \n{}\n"

    def generate_auxfun(self, name, auxspec):
        names_map = dict((v, v + '__') for v in auxspec[0])
        result, reusestr = self._process_reused({name: auxspec[1]}, names_map)
        context = {
            'name': name,
            'vnames': ', '.join([names_map[v] for v in auxspec[0]]),
            'reuseterms': "\n" + self.reuse.format(reusestr.strip()) if reusestr else '',
            'result': result[name],
        }

        code = self._render(MATLAB_AUX_TEMPLATE, context)
        return code, '\n'.join(code.split('\n')[:5])

    def generate_special(self, name, spec):
        raise NotImplementedError

    def _render(self, template, context):
        self.context.update(context)
        return template.format(**self.context)

    def _process_reused(self, specdict, names_map={}):

        for name, spec in specdict.iteritems():
            specdict[name] = self._normalize_spec(spec)

        reusestr, processed = self._processReusedMatlab(specdict.keys(), specdict)
        if names_map:
            for name in specdict.keys():
                q = QuantSpec('__q__', processed[name], treatMultiRefs=False)
                q.mapNames(names_map)
                processed[name] = q()
            if reusestr:
                reuseQ = QuantSpec('reuse', reusestr, preserveSpace=True)
                # TODO: uncomment to add name mangling in reuseterms
                # reuseQ.mapNames(names_map)
                reusestr = reuseQ()

        for name, spec in processed.iteritems():
            spec = self._processIfMatlab(spec)
            specdict[name] = self.adjust_call(spec)
        return processed, reusestr

    @property
    def adjust_call(self):
        """Callable which adds parameter argument to auxiliary function calls (if any)"""
        if self.fspec.auxfns:
            return lambda s: addArgToCalls(s, self.fspec.auxfns.keys(), 'p_')
        return idfn


    def generate_spec(self, specname_vars, specs):
        name = 'vfield'
        specupdated, reusestr = self._process_reused(dict((v, specs[v]) for v in specname_vars))

        context = {
            'name': name,
            'result': '\n'.join([
            'y_({0}) = {1};'.format(i + 1,  specupdated[it]) for i, it in enumerate(specname_vars)
            ]),
            'reuseterms': self.reuse.format(reusestr.strip()) if reusestr else '',
        }

        code = self._render( MATLAB_FUNCTION_TEMPLATE, context)
        return (code, name)

    def _processIfMatlab(self, specStr):
        # NEED TO CHECK WHETHER THIS IS NECESSARY AND WORKS
        # IF STATEMENTS LOOK DIFFERENT IN MATLAB
        qspec = QuantSpec('spec', specStr)
        qtoks = qspec[:]
        if 'if' in qtoks:
            raise NotImplementedError
        else:
            new_specStr = specStr
        return new_specStr

    def _processReusedMatlab(self, specnames, specdict):
        """Process reused subexpression terms for Matlab code."""

        reused, specupdated, new_protected, order = _processReused(specnames,
                                                                   specdict,
                                                                   self.fspec.reuseterms,
                                                                   '', '', ';',
                                                                   self.adjust_call)
        self.fspec._protected_reusenames = new_protected
        reusedefs = {}.fromkeys(new_protected)
        for _, deflist in reused.iteritems():
            for d in deflist:
                reusedefs[d[2]] = d
        return (concatStrDict(reusedefs, intersect(order, reusedefs.keys())),
                specupdated)

    def _format_user_code(self, code):
        before = '% Verbose code insert -- begin '
        after = '% Verbose code insert -- end \n\n'
        return self._format_code(code, before, after)
